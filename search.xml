<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Go1.23更新日志</title>
      <link href="/posts/62b69f6c.html"/>
      <url>/posts/62b69f6c.html</url>
      
        <content type="html"><![CDATA[<h2 id="slices相关"><a href="#slices相关" class="headerlink" title="slices相关"></a>slices相关</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">originArr := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">arr := slices.Repeat(originArr, <span class="number">3</span>)</span><br><span class="line">fmt.Println(arr) <span class="comment">// output: [1 2 3 1 2 3 1 2 3]</span></span><br><span class="line"></span><br><span class="line">slices.Sort(arr)</span><br><span class="line">slices.Reverse(arr) <span class="comment">// 逆序</span></span><br><span class="line">fmt.Println(arr)    <span class="comment">// output: [3 3 3 2 2 2 1 1 1]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="map相关"><a href="#map相关" class="headerlink" title="map相关"></a>map相关</h2><h3 id="使用slices-sorted对seq进行排序"><a href="#使用slices-sorted对seq进行排序" class="headerlink" title="使用slices.sorted对seq进行排序"></a>使用slices.sorted对seq进行排序</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;maps&quot;</span></span><br><span class="line"><span class="string">&quot;slices&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">struct</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">&quot;张三&quot;</span>: &#123;&#125;,</span><br><span class="line"><span class="string">&quot;李四&quot;</span>: &#123;&#125;,</span><br><span class="line"><span class="string">&quot;王五&quot;</span>: &#123;&#125;,</span><br><span class="line"><span class="string">&quot;老六&quot;</span>: &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, k := <span class="keyword">range</span> slices.Sorted(maps.Keys(m)) &#123;</span><br><span class="line">fmt.Println(k)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">张三</span></span><br><span class="line"><span class="comment">李四</span></span><br><span class="line"><span class="comment">王五</span></span><br><span class="line"><span class="comment">老六</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历seq"><a href="#遍历seq" class="headerlink" title="遍历seq"></a>遍历seq</h3><p>需要注意，不管是用for range还是maps.pull或maps.pull2方法去遍历map都是无序的。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;iter&quot;</span></span><br><span class="line"><span class="string">&quot;maps&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">struct</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">&quot;张三&quot;</span>: &#123;&#125;,</span><br><span class="line"><span class="string">&quot;李四&quot;</span>: &#123;&#125;,</span><br><span class="line"><span class="string">&quot;王五&quot;</span>: &#123;&#125;,</span><br><span class="line"><span class="string">&quot;老六&quot;</span>: &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">names := maps.Keys(m)</span><br><span class="line"><span class="comment">// 传统遍历方法</span></span><br><span class="line"><span class="keyword">for</span> k := <span class="keyword">range</span> names &#123;</span><br><span class="line">fmt.Println(k)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(strings.Repeat(<span class="string">&quot;-&quot;</span>, <span class="number">50</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新的遍历方法</span></span><br><span class="line">next, stop := iter.Pull(names)</span><br><span class="line"><span class="keyword">defer</span> stop()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">k, ok := next()</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(k)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(strings.Repeat(<span class="string">&quot;-&quot;</span>, <span class="number">50</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新的遍历kv的方法</span></span><br><span class="line">kvs := maps.All(m)</span><br><span class="line">next2, stop2 := iter.Pull2(kvs)</span><br><span class="line"><span class="keyword">defer</span> stop2()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">k, v, ok := next2()</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(k, <span class="string">&quot; &quot;</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="cookie相关"><a href="#cookie相关" class="headerlink" title="cookie相关"></a>cookie相关</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Cookie: session_id=eddycjy; value=hello-world; lang=en; lang=zh-CN</span></span><br><span class="line">lines := <span class="string">&quot;session_id=eddycjy; value=hello-world; lang=en; lang=zh-CN&quot;</span> <span class="comment">// 存在2个lang</span></span><br><span class="line">cookies, err := http.ParseCookie(lines)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, cookie := <span class="keyword">range</span> cookies &#123;</span><br><span class="line">fmt.Println(cookie.Name, <span class="string">&quot; &quot;</span>, cookie.Value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set-Cookie: session_id=eddycjy; MaxAge=0; lang=zh-CN; Domain=.eddycjy.com</span></span><br><span class="line">lines2 := <span class="string">&quot;session_id=eddycjy; MaxAge=0; lang=zh-CN; Domain=.eddycjy.com&quot;</span></span><br><span class="line">cookie2, err := http.ParseSetCookie(lines2)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(cookie2.Name)</span><br><span class="line">fmt.Println(cookie2.Value)</span><br><span class="line">fmt.Println(cookie2.MaxAge)</span><br><span class="line">fmt.Println(cookie2.Domain)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>排行榜服务设计</title>
      <link href="/posts/37a1071.html"/>
      <url>/posts/37a1071.html</url>
      
        <content type="html"><![CDATA[<h2 id="排行榜特点"><a href="#排行榜特点" class="headerlink" title="排行榜特点"></a>排行榜特点</h2><p>在互联网应用中，排行榜服务一般具有以下特点：</p><ul><li>曝光量大：排行榜往往会受到大量用户的关注，这也意味着会带来高并发读取排行榜的请求。</li><li>竞争激烈：用户为了获取流量优势和排名奖励，可能会受到参与者的激烈竞争，这将要求排行榜能够应对高并发的写请求。</li><li>实时变化：排名情况在实时变化，玩家会随时关心自己的最新排名。</li><li>周期滚动：排行榜可能会以月、周、天为周期进行滚动。</li></ul><p>因此，在实现排行榜服务时，需要重点考虑高并发读写、实时展示排名、轻松支持周期滚动的能力。</p><h2 id="使用什么存储系统来维护排行榜"><a href="#使用什么存储系统来维护排行榜" class="headerlink" title="使用什么存储系统来维护排行榜"></a>使用什么存储系统来维护排行榜</h2><p>在设计排行榜时，首先需要考虑的是使用什么存储系统来维护排行榜。<br>如果使用关系型数据库例如MySql来维护的话，其本身对于高并发的请求就比较弱；再加上需要支持按照得分进行排序，需要使用select和order by语句来实现。<br>因此该方法具有以下缺点：</p><ul><li>性能开销：在数据量大的情况下，排序操作会耗费大量的系统资源和处理时间，尤其是多字段排序时，查询效率更低。</li><li>磁盘I/O：当需要对大量数据进行排序的时候，可能会使用临时表或者磁盘存储技术，使排序操作不再全部运行在内存当中。但这需要进行大量的磁盘读写操作，从而导致查询响应时间变长。</li></ul><p>因此，排行榜服务并不太适合使用关系型数据库。排行榜一般是根据某种得分进行排序，因此可以考虑使用Redis的ZSET结构进行维护。</p><h2 id="使用ZSET"><a href="#使用ZSET" class="headerlink" title="使用ZSET"></a>使用ZSET</h2><p>我们可以使用一个ZSET对象来表示一个具体的排行榜，其中存储了用户ID和得分。</p><ul><li>key：排行榜名称</li><li>Member：存储用户ID</li><li>Score：存储得分</li></ul><p>这里我们以怪物Boss击杀排行榜举例，key为”Monster_Boss_Hunter”，member为玩家ID，score为击杀的怪物Boss数量。</p><p>对于排行榜更新，可以使用“zincrby key score member”命令，例如当ID为666的玩家在副本中新击杀了20个怪物Boss，可以如下命令在排行榜上加20分：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zincrby Monster_Boss_Hunter 20 666</span><br></pre></td></tr></table></figure><br>对于排行榜读取，可以使用“zrevrange Monster_Boss_Hunter start top withscores”命令，此命令可以按照得分从大到小的顺序返回member和其对应的得分。<br>其中，start表示从排名为start+1的Member开始查询，top表示到排名为top+1的Member结束查询，若top=-1表示查询整个ZSET对象，withscores表示展示每个Member对应的Score。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrevrange Monster_Boss_Hunter 0 -1 withscores</span><br></pre></td></tr></table></figure><br>如果只是想要获取某个玩家的排名，可以使用“zrevrank key member”命令，该命令返回member在ZSET中按从大到小排序的名次，偏移量是从0开始的。<br>需要注意的是zrevrank不返回得分，如果需要返回得分则需只能额外执行zscore命令来获取。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 获取玩家666的排名</span><br><span class="line">zrevrank Monster_Boss_Hunter 666</span><br><span class="line"></span><br><span class="line">-- 获取玩家666的得分</span><br><span class="line">zscore Monster_Boss_Hunter 666</span><br></pre></td></tr></table></figure></p><p>那么我们应该如何实现排行榜的周期滚动需求呢？其实也很简单，只需要在key上增加对应的周期数来区分同一排行榜的不同周期排名。<br>例如怪物Boss击杀排行榜是按月份进行统计的，因此我们可以把key改为“Monster<em>Boss_Hunter</em>{year}_{month}”，<br>例如2024年9月的怪物Boss击杀排行榜的key为“Monster_Boss_Hunter_2024_9”，当需要更新排行榜时根据当前时间的年月来获取排行榜具体的key再去执行更新操作。</p><p>借助ZSET结构，我们已经满足排行榜的基本要求了，但这里面还存在两个问题，分别是同积分排行处理和幂等更新。</p><h2 id="同积分处理"><a href="#同积分处理" class="headerlink" title="同积分处理"></a>同积分处理</h2><h2 id="幂等更新"><a href="#幂等更新" class="headerlink" title="幂等更新"></a>幂等更新</h2><p>直接使用zincrby的缺点是排行榜更新无法保证幂等性，如果排行榜服务的上游调用者在更新时遇到网络超时的情况下选择重试，那么就可能会导致用户得分被重复累计。<br>因此我们可以要求上游调用者提供一个分布式唯一ID作为请求ID，排行榜服务在更新得分前先查询是否有该请求ID，如果没有则进行更新操作并将请求ID保存在Redis中，否则不进行任何处理。<br>对于已经更新过的请求ID可以使用string对象或者hash结构保存起来：</p><ul><li>以string对象保存：key为“{ZSET key}_{请求ID}”，value可以是任意值。</li><li>以hash对象保存：key为“{ZSET key}_request_uuid”，field为请求ID，value可以是任意值。</li></ul><p>如果排行榜的写请求并发比较高，那么使用Redis全量保存更新排行榜请求ID会导致占用大量内存。<br>另外，考虑到重复更新请求基本上是上游调用者短时间内的重试请求，也就是说即使在Redis上查询到对应的请求ID也是最近才被写入的，因此我们只需要保存最近一段时间内（例如10min）的请求ID即可，也就是为对应的key设置过期时间为10min。</p><p>需要注意的是，此时更新排行榜的操作是由两个Redis写操作完成的，分别是写入请求ID和写入玩家得分，因此需要保证这两个Redis写操作的原子性，也就是这两个操作要么都执行要么都不执行，实现方法也很简单，就是使用lua脚本去执行这两个Redis写操作即可。</p><p>还需要注意的是，如果不是全量保存请求ID的话，那么此时幂等性并非真正的幂等性，只能保证这一段时间内（例如上面设置的10min内）的幂等，虽然这样实现并非严格的幂等性，但在绝大多数场景下都可以近似的认为满足幂等性。</p><h2 id="大key问题"><a href="#大key问题" class="headerlink" title="大key问题"></a>大key问题</h2>]]></content>
      
      
      <categories>
          
          <category> 系统架构设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排行榜 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
